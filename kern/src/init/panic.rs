use core::panic::PanicInfo;
use crate::console::{kprintln};
#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    // print monkey image and uh oh banner
    // monkey src: https://www.asciiart.eu/animals/monkeys
    kprintln!("\n       .--.  .-\'\'\'-.  .--.\r\n      /.\"\".v\'.-. .-.`v.\"\"\\\\\r\n      ||  / / O| | O\\ \\  ||\r\n      \\\\_/| \\__| |__/ |\\_//\r\n       `-\'\\  .-n-n-.  /`-\'\r\n        _.-\\/       \\/-._\r\n      .\'   (\\`.___.\'/)   `.\r\n     /      \\`.___.\'/      `.\r\n    /        `.___.\'         \\\r\n    |     |             \\     \\\r\n    |     |   .      .  |\\     \\\r\n    |     |             | \\     \\\r\n     \\     \\            |  \\     \\\r\n      \\     \\           |.\' `.    \\\r\n       `.    \\         .\'     `.   \\\r\n  _.._   `.   `-. ___ /        /`.  `.\r\n\'    \"-._|`\\    `.__)       .\'  /    `.\r\n|         `-.\\     \\/      .\'   / /\\  )|\\.\r\n \\          _/ / /|/     .\'    (_/ / / | \\)\r\n  `._      (__/_/-/   ..\'         (_/| |\\_)\r\n     ``--._____.-(     `.            `-\'\r\n                  `--.   `.\r\n                    (_/\\ \\\\\\\r\n                       /_///");
    // uh oh message generated by: http://www.patorjk.com/software/taag/#p=testall&f=Coinstak&t=Uh%20Oh!
    kprintln!("\n                                                             ,---,  \r\n                                     ,----..              ,`--.\' |  \r\n                ,---,               /   /   \\    ,---,    |   :  :  \r\n         ,--, ,--.\' |              /   .     : ,--.\' |    \'   \'  ;  \r\n       ,\'_ /| |  |  :             .   /   ;.  \\|  |  :    |   |  |  \r\n  .--. |  | : :  :  :            .   ;   /  ` ;:  :  :    \'   :  ;  \r\n,\'_ /| :  . | :  |  |,--.        ;   |  ; \\ ; |:  |  |,--.|   |  \'  \r\n|  \' | |  . . |  :  \'   |        |   :  | ; | \'|  :  \'   |\'   :  |  \r\n|  | \' |  | | |  |   /\' :        .   |  \' \' \' :|  |   /\' :;   |  ;  \r\n:  | | :  \' ; \'  :  | | |        \'   ;  \\; /  |\'  :  | | |`---\'. |  \r\n|  ; \' |  | \' |  |  \' | :         \\   \\  \',  / |  |  \' | : `--..`;  \r\n:  | : ;  ; | |  :  :_:,\'          ;   :    /  |  :  :_:,\'.--,_     \r\n\'  :  `--\'   \\|  | ,\'               \\   \\ .\'   |  | ,\'    |    |`.  \r\n:  ,      .-./`--\'\'                  `---`     `--\'\'      `-- -`, ; \r\n `--`----\'                                                  \'---`\"  \r\n                                                                    \r\n\r\n");
    kprintln!("-----KERNEL PANIC-----");
    match _info.location() {
        Some(loc) => {
            let file = loc.file();
            let line = loc.line();
            let col = loc.column(); 
            /*let payload_str = match _info.payload().try_into::<&str>() {
                Ok(s) => s,
                _ => "Error casting payload to string."
            };*/
            let msg = match _info.message() {
                Some(msg) => *msg,
                _ => format_args!("No message :(")
            };
            kprintln!("FILE: {}\nLINE: {}\nCOL:  {}\n{}", file, line, col, msg);
        },
        None => {
            kprintln!("Panic location information unavailable :(");
        }
    };

    loop {}
}
